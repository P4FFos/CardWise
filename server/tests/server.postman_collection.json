{
	"info": {
		"_postman_id": "b624ed25-2254-4123-8a71-8fc39dfc78d0",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38409323"
	},
	"item": [
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let currentDate = new Date().toISOString();",
							"pm.environment.set(\"registrationDate\", currentDate);",
							"pm.environment.set(\"lastLoginDate\", currentDate);",
							"pm.environment.set(\"username\", \"user1\");",
							"pm.environment.set(\"password\", \"password1\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());",
							"var userID = jsonData._id;",
							"pm.environment.set(\"userID\", userID);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response contains user ID\", function () {",
							"    pm.expect(jsonData).to.have.property(\"_id\");",
							"});",
							"pm.test(\"Response contains username\", function () {",
							"    pm.expect(jsonData).to.have.property(\"username\", \"user1\");",
							"});",
							"pm.test(\"Response contains password\", function () {",
							"    pm.expect(jsonData).to.have.property(\"password\", \"password1\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\",\n    \"registrationDate\": \"{{registrationDate}}\",\n    \"lastLoginDate\": \"{{lastLoginDate}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(pm.response.text());",
							"",
							"pm.test(\"Username is updated\", function () {",
							"    pm.expect(jsonData.username).to.eql(\"user2\");",
							"});",
							"",
							"pm.test(\"Password is updated\", function () {",
							"    pm.expect(jsonData.password).to.eql(\"password2\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"password2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user/{{userID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(pm.response.text());",
							"",
							"pm.test(\"Username is updated\", function () {",
							"    pm.expect(jsonData.username).to.eql(\"user3\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user/{{userID}}/username",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"{{userID}}",
						"username"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User account has been deleted (200 OK)\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/user/{{userID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /api/decks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(pm.response.text());\r",
							"pm.environment.set(\"deck_id\", jsonData._id);\r",
							"\r",
							"pm.test(\"Resource is CREATED\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Deck name is not empty.\", function(){\r",
							"    pm.expect(jsonData.name).not.eql(null);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Fire\",\r\n    \"cards\": [\r\n        {\r\n            \"content\": \"Big fire\",\r\n            \"explanation\": \"Lava\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/decks",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/decks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains deck(s)\", function(){\r",
							"    var jsonInfo = pm.response.json();\r",
							"    pm.expect(jsonInfo.decks).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/decks",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/decks/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/decks/{{deck_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks",
						"{{deck_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH /api/decks/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the name of the deck\", function(){\r",
							"    var jsonInfo = pm.response.json();\r",
							"    pm.expect(jsonInfo.name).to.eql(\"Succesfull Patch\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Succesfull Patch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/decks/{{deck_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks",
						"{{deck_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /api/decks/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonInfo = pm.response.json();\r",
							"console.log(jsonInfo);\r",
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the name of the deck\", function(){\r",
							"    pm.expect(jsonInfo.name).to.eql(\"Succesfull Name Change\");\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the content of the card\", function(){\r",
							"    pm.expect(jsonInfo.cards[0].content).to.eql(\"Succesfull Content Change\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Request should change the explanation of the card\", function(){\r",
							"    pm.expect(jsonInfo.cards[0].explanation).to.eql(\"Succesfull Explanation Change\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Succesfull Name Change\",\r\n    \"cards\": [\r\n        {\r\n            \"content\": \"Succesfull Content Change\",\r\n            \"explanation\": \"Succesfull Explanation Change\"\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/decks/{{deck_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks",
						"{{deck_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /api/decks/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/decks/{{deck_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks",
						"{{deck_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /api/decks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content has been deleted\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/decks",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"decks"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new test achievement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Resource is CREATED\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be a valid TestAchievement\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.type).to.eql(\"TestAchievement\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"name\", \"Pass 5 Tests\");\r",
							"    pm.expect(jsonData).to.have.property(\"isTriggered\", false);\r",
							"    pm.expect(jsonData).to.have.property(\"condition\", \"Pass at least 5 tests\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"TestAchievement\",\r\n  \"name\": \"Pass 5 Tests\",\r\n  \"isTriggered\": false,\r\n  \"condition\": \"Pass at least 5 tests\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/achievements",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new streak achievement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Resource is CREATED\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be a valid StreakAchievement\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.type).to.eql(\"StreakAchievement\");\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"name\", \"7 Day Streak\");\r",
							"    pm.expect(jsonData).to.have.property(\"streakCounter\", 7);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"StreakAchievement\",\r\n  \"name\": \"10 Day Streak\",\r\n  \"streakCounter\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/achievements",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/achievements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains achievements(s)\", function(){\r",
							"    var jsonInfo = pm.response.json();\r",
							"    pm.expect(jsonInfo.decks).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/achievements",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/achievement/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/achievements/{{achievement_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements",
						"{{achievement_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /api/achievements",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content has been deleted\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Deletion message display\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.include(\"Achievement(s) deleted. Progress restarted.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/achievements",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /api/achievements/:id test achievement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonInfo = pm.response.json();\r",
							"console.log(jsonInfo);\r",
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the name of the test achievement\", function(){\r",
							"    pm.expect(jsonInfo.name).to.eql(\"Succesfull Name Change\");\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the condition of the achievement\", function(){\r",
							"    pm.expect(jsonInfo.cards[0].condition).to.eql(\"Succesfull Condition Change\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"TestAchievement\",\r\n  \"name\": \"Succesfull Name Change\",\r\n  \"isTriggered\": false,\r\n  \"condition\": \"Succesfull Condition Change\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/achievements/{{achievement_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements",
						"{{achievement_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /api/achievements/:id streak achievement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonInfo = pm.response.json();\r",
							"console.log(jsonInfo);\r",
							"pm.test(\"Request is CREATED\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the name of the test achievement\", function(){\r",
							"    pm.expect(jsonInfo.name).to.eql(\"Succesfull Name Change\");\r",
							"});\r",
							"\r",
							"pm.test(\"Request should change the streak counter of the achievement\", function(){\r",
							"    pm.expect(jsonInfo.cards[0].streakCounter).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"StreakAchievement\",\r\n  \"name\": \"Succesfull Name Change\",\r\n  \"streakCounter\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/achievements/{{achievement_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"achievements",
						"{{achievement_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "card_id",
			"value": "1"
		}
	]
}